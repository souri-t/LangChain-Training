@page "/translation"
@using AgentClient.Models
@using TranslationAgent.Core.Services
@inject IConfiguration Configuration
@rendermode InteractiveServer

<PageTitle>ÁøªË®≥„Ç®„Éº„Ç∏„Çß„É≥„Éà</PageTitle>

<h1>üåê ÁøªË®≥„Ç®„Éº„Ç∏„Çß„É≥„Éà</h1>

<div class="chat-container">
    <div class="messages-area">
        @foreach (var message in messages)
        {
            <div class="message @message.Role">
                <div class="message-header">
                    <strong>@(message.Role == "user" ? "„ÅÇ„Å™„Åü" : "AI")</strong>
                    <span class="timestamp">@message.Timestamp.ToString("HH:mm:ss")</span>
                </div>
                <div class="message-content">
                    <pre>@message.Content</pre>
                </div>
            </div>
        }
        @if (isProcessing)
        {
            <div class="message assistant">
                <div class="message-header">
                    <strong>AI</strong>
                </div>
                <div class="message-content">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Âá¶ÁêÜ‰∏≠...</span>
                    </div>
                    <span class="ms-2">@progressMessage</span>
                </div>
            </div>
        }
        <div @ref="messagesEndRef"></div>
    </div>

    <div class="input-area">
        <textarea 
            @bind="inputText" 
            @bind:event="oninput"
            @onkeydown="HandleKeyPress"
            placeholder="ÁøªË®≥„Åó„Åü„ÅÑ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..." 
            rows="4" 
            class="form-control"
            disabled="@isProcessing"></textarea>
        <button 
            class="btn btn-primary mt-2" 
            @onclick="SendMessage" 
            disabled="@(isProcessing || string.IsNullOrWhiteSpace(inputText))">
            <i class="bi bi-send"></i> ÁøªË®≥
        </button>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private string inputText = string.Empty;
    private bool isProcessing = false;
    private string progressMessage = string.Empty;
    private ElementReference messagesEndRef;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(inputText) || isProcessing)
            return;

        var userMessage = inputText.Trim();
        inputText = string.Empty;

        // „É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËøΩÂä†
        messages.Add(new ChatMessage
        {
            Role = "user",
            Content = userMessage,
            Timestamp = DateTime.Now
        });

        isProcessing = true;
        progressMessage = "ÁøªË®≥„ÇíÈñãÂßã„Åó„Åæ„Åô...";
        StateHasChanged();

        try
        {
            // ÁøªË®≥„Çµ„Éº„Éì„Çπ„Çí‰ΩúÊàê
            var apiKey = Configuration["API_KEY"] ?? Environment.GetEnvironmentVariable("API_KEY") ?? "";
            var baseUrl = Configuration["BASE_URL"] ?? Environment.GetEnvironmentVariable("BASE_URL") ?? "https://openrouter.ai/api/v1";
            var modelName = Configuration["MODEL_NAME"] ?? Environment.GetEnvironmentVariable("MODEL_NAME") ?? "anthropic/claude-3.5-sonnet";

            var translationService = new TranslationService(apiKey, baseUrl, modelName);

            // ÁøªË®≥„ÇíÂÆüË°å
            var result = await translationService.TranslateAsync(
                userMessage,
                progress =>
                {
                    progressMessage = progress;
                    InvokeAsync(StateHasChanged);
                }
            );

            // AIÂøúÁ≠î„ÇíËøΩÂä†
            messages.Add(new ChatMessage
            {
                Role = "assistant",
                Content = result,
                Timestamp = DateTime.Now
            });
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage
            {
                Role = "assistant",
                Content = $"„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {ex.Message}",
                Timestamp = DateTime.Now
            });
        }
        finally
        {
            isProcessing = false;
            progressMessage = string.Empty;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 200px);
        max-width: 1200px;
        margin: 0 auto;
    }

    .messages-area {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        background-color: #f8f9fa;
        margin-bottom: 20px;
    }

    .message {
        margin-bottom: 20px;
        padding: 15px;
        border-radius: 8px;
        animation: fadeIn 0.3s;
    }

    .message.user {
        background-color: #e3f2fd;
        margin-left: 20%;
    }

    .message.assistant {
        background-color: #f1f8e9;
        margin-right: 20%;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        font-size: 0.9em;
        color: #666;
    }

    .message-content pre {
        white-space: pre-wrap;
        word-wrap: break-word;
        margin: 0;
        font-family: inherit;
        background: transparent;
        border: none;
        padding: 0;
    }

    .input-area {
        padding: 20px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        background-color: white;
    }

    .timestamp {
        font-size: 0.85em;
        color: #999;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
